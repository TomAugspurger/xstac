import urllib.request
import xarray as xr
import xstac
import pandas as pd
import pathlib
import pystac
import json

url = "http://berkeleyearth.lbl.gov/auto/Global/Gridded/Complete_TMAX_EqualArea.nc"
file = "Complete_TMAX_EqualArea.nc"

if __name__ == "__main__":
    if not pathlib.Path(file).exists():
        urllib.request.urlretrieve(url, file)

    ds = xr.open_dataset(file)

    # TODO: Verify that this is correct.
    # xarray is reading these as floating point numbers like 1980.125; Need
    # to figure out what convention / encoding gets us from floats to datetimes.
    time = pd.date_range(
        pd.Timestamp(year=int(ds.time.min().item()), month=1, day=1),
        freq="MS",
        periods=len(ds.time),
    )
    ds["time"] = time

    # attrs need to be JSON serializable; xarray / h5py are loading these
    # as NumPy scalars; we convert them to JSON-serializable scalars.
    for item in ["temperature", "climatology"]:
        for k in ["valid_min", "valid_max"]:
            ds[item].attrs[k] = ds[item].attrs[k].item()

    properties = dict(
        start_datetime=time[0].to_pydatetime(), end_datetime=time[-1].to_pydatetime()
    )

    template = {
        "id": "id",
        "type": "Feature",
        "links": [],
        "geometry": None,  # generated by xstac
        "stac_version": "1.0.0",
        "properties": {
            "start_datetime": time[0].isoformat() + "Z",
            "end_datetime": time[-1].isoformat() + "Z",
        },
        "assets": {},
    }

    result = xstac.xarray_to_stac(
        ds,
        template,
        temporal_dimension="time",
        x_dimension="longitude",
        y_dimension="latitude",
        reference_system="4326",  # TODO: this is probably incorrect.
    )
    result.assets["data"] = pystac.Asset(
        href=url, title="Complete TMAX Equal Area", roles=["data"]
    )

    pathlib.Path("berkeley-earth-item.json").write_text(
        json.dumps(result.to_dict(), indent=2)
    )
